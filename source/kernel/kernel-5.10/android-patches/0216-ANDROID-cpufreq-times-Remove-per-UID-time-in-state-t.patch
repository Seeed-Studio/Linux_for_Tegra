From 4ff064dd276ae36293834d8101e04a1beda076c5 Mon Sep 17 00:00:00 2001
From: Connor O'Brien <connoro@google.com>
Date: Fri, 28 Feb 2020 12:28:40 -0800
Subject: [PATCH 216/830] ANDROID: cpufreq: times: Remove per-UID time in state
 tracking
X-NVConfidentiality: public

This removes the portion of commit c408992c711a ("ANDROID: cpufreq:
times: track per-uid time in state") adding per-UID tracking, while
preserving an added null check in the per-task tracking code.

Bug: 127641090
Signed-off-by: Connor O'Brien <connoro@google.com>
Change-Id: Iae3e0abef32cbbb9fdc674079973040be0060ac7
---
 drivers/cpufreq/cpufreq_times.c | 45 ---------------------------------
 drivers/misc/uid_sys_stats.c    |  4 ---
 include/linux/cpufreq_times.h   |  3 ---
 3 files changed, 52 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_times.c b/drivers/cpufreq/cpufreq_times.c
index 3f4f68b15fd9..0749d8d8afde 100644
--- a/drivers/cpufreq/cpufreq_times.c
+++ b/drivers/cpufreq/cpufreq_times.c
@@ -15,30 +15,14 @@
 
 #include <linux/cpufreq.h>
 #include <linux/cpufreq_times.h>
-#include <linux/hashtable.h>
-#include <linux/init.h>
 #include <linux/jiffies.h>
-#include <linux/proc_fs.h>
 #include <linux/sched.h>
 #include <linux/seq_file.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
 #include <linux/threads.h>
 
-#define UID_HASH_BITS 10
-
-static DECLARE_HASHTABLE(uid_hash_table, UID_HASH_BITS);
-
 static DEFINE_SPINLOCK(task_time_in_state_lock); /* task->time_in_state */
-static DEFINE_SPINLOCK(uid_lock); /* uid_hash_table */
-
-struct uid_entry {
-	uid_t uid;
-	unsigned int max_state;
-	struct hlist_node hash;
-	struct rcu_head rcu;
-	u64 time_in_state[0];
-};
 
 /**
  * struct cpu_freqs - per-cpu frequency information
@@ -152,9 +136,7 @@ void cpufreq_acct_update_power(struct task_struct *p, u64 cputime)
 {
 	unsigned long flags;
 	unsigned int state;
-	struct uid_entry *uid_entry;
 	struct cpu_freqs *freqs = all_freqs[task_cpu(p)];
-	uid_t uid = from_kuid_munged(current_user_ns(), task_uid(p));
 
 	if (!freqs || is_idle_task(p) || p->flags & PF_EXITING)
 		return;
@@ -166,12 +148,6 @@ void cpufreq_acct_update_power(struct task_struct *p, u64 cputime)
 	    p->time_in_state)
 		p->time_in_state[state] += cputime;
 	spin_unlock_irqrestore(&task_time_in_state_lock, flags);
-
-	spin_lock_irqsave(&uid_lock, flags);
-	uid_entry = find_or_register_uid_locked(uid);
-	if (uid_entry && state < uid_entry->max_state)
-		uid_entry->time_in_state[state] += cputime;
-	spin_unlock_irqrestore(&uid_lock, flags);
 }
 
 void cpufreq_times_create_policy(struct cpufreq_policy *policy)
@@ -213,27 +189,6 @@ void cpufreq_times_create_policy(struct cpufreq_policy *policy)
 		all_freqs[cpu] = freqs;
 }
 
-void cpufreq_task_times_remove_uids(uid_t uid_start, uid_t uid_end)
-{
-	struct uid_entry *uid_entry;
-	struct hlist_node *tmp;
-	unsigned long flags;
-
-	spin_lock_irqsave(&uid_lock, flags);
-
-	for (; uid_start <= uid_end; uid_start++) {
-		hash_for_each_possible_safe(uid_hash_table, uid_entry, tmp,
-			hash, uid_start) {
-			if (uid_start == uid_entry->uid) {
-				hash_del_rcu(&uid_entry->hash);
-				kfree_rcu(uid_entry, rcu);
-			}
-		}
-	}
-
-	spin_unlock_irqrestore(&uid_lock, flags);
-}
-
 void cpufreq_times_record_transition(struct cpufreq_policy *policy,
 	unsigned int new_freq)
 {
diff --git a/drivers/misc/uid_sys_stats.c b/drivers/misc/uid_sys_stats.c
index da1175d7b87e..47336700f687 100644
--- a/drivers/misc/uid_sys_stats.c
+++ b/drivers/misc/uid_sys_stats.c
@@ -14,7 +14,6 @@
  */
 
 #include <linux/atomic.h>
-#include <linux/cpufreq_times.h>
 #include <linux/err.h>
 #include <linux/hashtable.h>
 #include <linux/init.h>
@@ -424,9 +423,6 @@ static ssize_t uid_remove_write(struct file *file,
 		return -EINVAL;
 	}
 
-	/* Also remove uids from /proc/uid_time_in_state */
-	cpufreq_task_times_remove_uids(uid_start, uid_end);
-
 	rt_mutex_lock(&uid_lock);
 
 	for (; uid_start <= uid_end; uid_start++) {
diff --git a/include/linux/cpufreq_times.h b/include/linux/cpufreq_times.h
index 881d5026f0db..38272a5f3163 100644
--- a/include/linux/cpufreq_times.h
+++ b/include/linux/cpufreq_times.h
@@ -29,7 +29,6 @@ void cpufreq_acct_update_power(struct task_struct *p, u64 cputime);
 void cpufreq_times_create_policy(struct cpufreq_policy *policy);
 void cpufreq_times_record_transition(struct cpufreq_policy *policy,
                                      unsigned int new_freq);
-void cpufreq_task_times_remove_uids(uid_t uid_start, uid_t uid_end);
 #else
 static inline void cpufreq_task_times_init(struct task_struct *p) {}
 static inline void cpufreq_task_times_alloc(struct task_struct *p) {}
@@ -39,7 +38,5 @@ static inline void cpufreq_acct_update_power(struct task_struct *p,
 static inline void cpufreq_times_create_policy(struct cpufreq_policy *policy) {}
 static inline void cpufreq_times_record_transition(
 	struct cpufreq_policy *policy, unsigned int new_freq) {}
-static inline void cpufreq_task_times_remove_uids(uid_t uid_start,
-						  uid_t uid_end) {}
 #endif /* CONFIG_CPU_FREQ_TIMES */
 #endif /* _LINUX_CPUFREQ_TIMES_H */
-- 
2.17.1

