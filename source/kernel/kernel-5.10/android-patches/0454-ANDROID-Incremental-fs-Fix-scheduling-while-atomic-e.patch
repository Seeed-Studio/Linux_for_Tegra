From 30f9de3bbd9143831acb33e05b6bdbcb30b0f4ef Mon Sep 17 00:00:00 2001
From: Paul Lawrence <paullawrence@google.com>
Date: Tue, 12 May 2020 15:50:04 -0700
Subject: [PATCH 454/830] ANDROID: Incremental fs: Fix scheduling while atomic
 error
X-NVConfidentiality: public

If an incfs file is created, then the file system is sync'd,on opening
the incfs file inode_set reads the size from the backing file from
within iget5_locked, causing this error.

Test: incfs_test passes, this no longer occurs
Bug: 156413528
Signed-off-by: Paul Lawrence <paullawrence@google.com>
Change-Id: I8939c4afa514d39d251c044d7680cfc69272669e
---
 fs/incfs/vfs.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/fs/incfs/vfs.c b/fs/incfs/vfs.c
index b5b609bb74c1..e69da5ccaf94 100644
--- a/fs/incfs/vfs.c
+++ b/fs/incfs/vfs.c
@@ -207,6 +207,8 @@ struct inode_search {
 	unsigned long ino;
 
 	struct dentry *backing_dentry;
+
+	size_t size;
 };
 
 enum parse_parameter {
@@ -365,7 +367,7 @@ static int inode_set(struct inode *inode, void *opaque)
 
 		fsstack_copy_attr_all(inode, backing_inode);
 		if (S_ISREG(inode->i_mode)) {
-			u64 size = read_size_attr(backing_dentry);
+			u64 size = search->size;
 
 			inode->i_size = size;
 			inode->i_blocks = get_blocks_count_for_size(size);
@@ -441,7 +443,8 @@ static struct inode *fetch_regular_inode(struct super_block *sb,
 	struct inode *backing_inode = d_inode(backing_dentry);
 	struct inode_search search = {
 		.ino = backing_inode->i_ino,
-		.backing_dentry = backing_dentry
+		.backing_dentry = backing_dentry,
+		.size = read_size_attr(backing_dentry),
 	};
 	struct inode *inode = iget5_locked(sb, search.ino, inode_test,
 				inode_set, &search);
-- 
2.17.1

