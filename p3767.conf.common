# Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

sub_var_token()
{
	local var="$1";
	local from="$2";
	local to="$3";
	if [ "${var}" != "" -a "${!var}" != "" ]; then
		if [[ "${!var}" =~ "${from}" ]]; then
			local val=`echo "${!var}" | sed -e s/${from}/${to}/`;
			eval "${var}=${val}";
		fi;
	fi;
}

# process_chip_sku_version:
#
process_chip_sku_version()
{
	local chip_sku="${1}";
	local chip_minor_revision_id="${2}";
	local bootrom_revision_id="${3}";
	local ramcode="${4}";
	local fuselevel="${5}";
	local board_FAB="${6}";

	echo "Chip SKU(${chip_sku}) ramcode(${ramcode}) fuselevel(${fuselevel}) board_FAB(${board_FAB})"
}

# Process_board_version:
# Trigger to read the board id and board version from EEPROM on main board.
# undef for non eeprom boards.
process_board_version()
{
	local board_id="${1}";
	local board_version="${2}";
	local board_sku="${3}";
	local board_revision="${4}";
	local chiprev="${5}";

	echo "Board ID(${board_id}) version(${board_version}) sku(${board_sku}) revision(${board_revision})"

	if [ "${board_sku}" = "0000" ] || [ "${board_sku}" = "0002" ]; then
		if [ "${board_FAB}" = "TS1" ] || [ "${board_FAB}" = "EB1" ]; then
			PMIC_CONFIG="tegra234-mb1-bct-pmic-p3767-0000-a00.dts";
		fi
	fi

	if [ "${board_sku}" = "0001" ] || [ "${board_sku}" = "0003" ] || \
		[ "${board_sku}" = "0005" ]; then
			EMMC_BCT="tegra234-p3767-0001-sdram-l4t.dts";
			WB0SDRAM_BCT="tegra234-p3767-0001-wb0sdram-l4t.dts";
	elif [ "${board_sku}" = "0004" ]; then
		EMMC_BCT="tegra234-p3767-0004-sdram-l4t.dts";
		WB0SDRAM_BCT="tegra234-p3767-0004-wb0sdram-l4t.dts";
	fi

	if [ "${board_sku}" = "0003" ] || [ "${board_sku}" = "0004" ] || \
		[ "${board_sku}" = "0005" ]; then
			BPFFILE="bootloader/bpmp_t234-TE950M-A1_prod.bin";
	fi
}

process_fuse_level()
{
	local fuselevel="${1}";
	local srctoken="_dev";
	local trgtoken="_prod";

	# fuselevel:
	#	"fuselevel_unknown"
	#	"fuselevel_nofuse"
	#	"fuselevel_production"
	#
	case ${fuselevel} in
	fuselevel_unknown)
		return;
		;;
	fuselevel_nofuse)
		srctoken="_prod";
		trgtoken="_dev";
		;;
	*)
		;;
	esac;
	sub_var_token "MB1FILE"    "${srctoken}" "${trgtoken}";
	sub_var_token "SOSFILE"    "${srctoken}" "${trgtoken}";
	sub_var_token "NVHOSTNVDEC" "${srctoken}" "${trgtoken}";
	sub_var_token "BPFFILE" "${srctoken}" "${trgtoken}";
	sub_var_token "MTSMCEFILE" "${srctoken}" "${trgtoken}";
	sub_var_token "PSCFW" "${srctoken}" "${trgtoken}";
	sub_var_token "PSCBL1FILE" "${srctoken}" "${trgtoken}";
	sub_var_token "WB0BOOT" "${srctoken}" "${trgtoken}";
	sub_var_token "PSC_RF" "${srctoken}" "${trgtoken}";
	sub_var_token "XUSBFILE" "${srctoken}" "${trgtoken}";
	sub_var_token "READINFOFILE" "${srctoken}" "${trgtoken}";
	sub_var_token "NVKEY_FILE" "${srctoken}" "${trgtoken}";
	sub_var_token "NVENCRYPTKEY_FILE" "${srctoken}" "${trgtoken}";
}

# Common values and/or defaults across P3767:

ODMDATA="gbe-uphy-config-8,hsstp-lane-map-3,hsio-uphy-config-0";
CHIPID=0x23;
ITS_FILE=;
OVERLAY_DTB_FILE="L4TConfiguration.dtbo,tegra234-p3767-overlay.dtbo";
CMDLINE_ADD="mminit_loglevel=4 console=ttyTCU0,115200 console=ttyAMA0,115200 firmware_class.path=/etc/firmware fbcon=map:0 net.ifnames=0"
target_board="t186ref";
ROOTFSSIZE=55GiB;
ROOT_DEV="mmcblk0p1 ------------ internal eMMC.
        sda1 ----------------- external USB devices. (USB memory stick, HDD)
        eth0 ----------------- nfsroot via RJ45 Ethernet port.
        eth1 ----------------- nfsroot via USB Ethernet interface.";
TEGRABOOT="bootloader/mb2_t234.bin";
BOOTLOADER="bootloader/mb2_t234.bin";
UEFIBL="uefi_jetson_with_dtb.bin";
TBCFILE="bootloader/uefi_jetson.bin";
BPFFILE="bootloader/bpmp_t234-TE990M-A1_prod.bin";
TOSFILE="bootloader/tos_t234.img";
EKSFILE="bootloader/eks_t234.img";
PSCBL1FILE="bootloader/psc_bl1_t234_prod.bin";
PSCFW="bootloader/pscfw_t234_prod.bin";
TSECFW="bootloader/tsec_t234.bin";
NVHOSTNVDEC="bootloader/nvdec_t234_prod.fw";
DCE="bootloader/display-t234-dce.bin";
MB1FILE="bootloader/mb1_t234_prod.bin";
SOSFILE="bootloader/mb1_t234_prod.bin";
MB2BLFILE="bootloader/mb2_t234.bin";
SPEFILE="bootloader/spe_t234.bin";
CAMERAFW="bootloader/camera-rtcpu-t234-rce.img";
EMCFUSE="fuse_t234.xml";
NVKEY_FILE="bootloader/t234_rsa_prod.key";
NVENCRYPTKEY_FILE="bootloader/t234_sbk_prod.key";
MTSMCEFILE="bootloader/mce_flash_o10_cr_prod.bin";
APPLET="bootloader/applet_t234.bin";
APEFILE="bootloader/adsp-fw.bin";
XUSBFILE="bootloader/xusb_t234_prod.bin";
EMC_OPT_DISABLE_FUSE_OVERRIDE="1";
WB0BOOT="bootloader/sc7_t234_prod.bin";
MB2_RF="bootloader/mb2rf_t234.bin";
PSC_RF="bootloader/psc_rf_t234_prod.bin";
DFLT_CUSTOMER_INFO="bootloader/default_custinfo.bin"
UEFI_OS_LAUNCHER=1;
BOOTPARTSIZE=8388608;

# BCT args:
#
BCT="--sdram_config";
BINSARGS="--bins \"";
EMMC_BCT="tegra234-p3767-0000-sdram-l4t.dts";
WB0SDRAM_BCT="tegra234-p3767-0000-wb0sdram-l4t.dts";
MISC_CONFIG="tegra234-mb1-bct-misc-p3767-0000.dts";
DEV_PARAMS="tegra234-br-bct-p3767-0000-l4t.dts";
# Booting from chain B
DEV_PARAMS_B="tegra234-br-bct_b-p3767-0000-l4t.dts";
EMC_FUSE_DEV_PARAMS="tegra234-br-bct-diag-boot.dts";
SCR_CONFIG="tegra234-mb2-bct-scr-p3767-0000.dts";
PMIC_CONFIG="tegra234-mb1-bct-pmic-p3767-0000-a02.dts";
DEVICEPROD_CONFIG="tegra234-mb1-bct-cprod-p3767-0000.dts";
PROD_CONFIG="tegra234-mb1-bct-prod-p3767-0000.dts";
BOOTROM_CONFIG="tegra234-mb1-bct-reset-p3767-0000.dts";
DEVICE_CONFIG="tegra234-mb1-bct-device-p3767-0000.dts";
GPIOINT_CONFIG="tegra234-mb1-bct-gpioint-p3767-0000.dts";
UPHYLANE_CONFIG="tegra234-mb1-bct-uphylane-si.dtsi"
MB2_BCT="tegra234-mb2-bct-misc-p3767-0000.dts";
INITRD_IN_BOOTIMG="yes";
INITRD="bootloader/l4t_initrd.img";
FBFILE="fuse_bypass_t234.xml";
DFLT_CHIP_SKU="00:00:00:D3"

# Default FAB: Force P3767 boards without properly programmed EEPROM.
# Values: A00 ->
DEFAULT_FAB="A00";
VERFILENAME="qspi_bootblob_ver.txt";
OTA_BOOT_DEVICE="/dev/mtdblock0";
OTA_GPT_DEVICE="/dev/mtdblock0";
READINFOFILE="bootloader/readinfo_t234_min_prod.xml";
# Rollback protection
MINRATCHET_CONFIG="tegra234-mb1-bct-ratchet-p3767-0000.dts";

# Rootfs A/B:
if [ "${ROOTFS_AB}" == 1 ]; then
	rootfs_ab=1
	ROOTFSSIZE=7GiB;
fi;
